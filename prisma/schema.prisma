// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  fname      String   @db.VarChar(100)
  lname      String   @db.VarChar(100)
  email      String   @unique @db.VarChar(100)
  provider   String?  @db.VarChar(20)
  externalId String   @unique @db.VarChar(100)
  image      String?  @db.Text
  role       String   @default("customer") @db.VarChar(12)
  updatedAt  DateTime @default(now()) @updatedAt
  createdAt  DateTime @default(now())
  orders     Order[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  image       String?     @db.Text
  description String?     @db.Text
  price       Float
  updatedAt   DateTime    @default(now()) @updatedAt
  createdAt   DateTime    @default(now())
  orders      Order[]
  inventories Inventory[]
}

model Warehouse {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(100)
  pincode         String?          @db.VarChar(6)
  updatedAt       DateTime         @default(now()) @updatedAt
  createdAt       DateTime         @default(now())
  inventories     Inventory[]
  deliveryPersons DeliveryPerson[]

  @@index([pincode], name: "pincode_index")
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    String
  status    String
  type      String   @default("quick")
  price     Float
  address   String
  productId Int?
  qty       Int
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  pincode   String?  @db.VarChar(6)

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product        Product?         @relation(fields: [productId], references: [id], onDelete: NoAction)
  deliveryPerson DeliveryPerson[]
  inventory      Inventory[]
}

model DeliveryPerson {
  id          String @id @default(uuid())
  name        String @db.VarChar(100)
  phone       String @db.VarChar(13)
  warehouseId Int?
  orderId     Int?

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())

  warehouse Warehouse? @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  order     Order?     @relation(fields: [orderId], references: [id], onDelete: SetNull)
}

model Inventory {
  id          Int    @id @default(autoincrement())
  sku         String @unique @db.VarChar(8)
  orderId     Int?   @unique
  warehouseId Int
  productId   Int

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())

  order     Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}
